



    这篇小文只是思考游戏主逻辑结构后对多数游戏用C而不是C++实现的原因作了一些
讨论。不代表什么建议。
    


    先不对整体结构做什么评论，而只看mainloop()函数。

    如果不出意外，这个函数中的循环中出现的所有的类，一次游戏的过程中都只有唯
一的一个实例，就是说，为了加快循环的速度，这些函数应该被设计成静态函数。
    而相应的，在这个循环中出现的类，因为只会存在一个实例，所以它们应该被设计
成单件类（Singleton，单例模式），以防止错误的调用发生。
    
    然而再看主循环中出现的几个类CSpell、CNpc、CMonster，事实上，这几个类存在
的主要用途管理一些只在当前类内存在意义的元素。（比如，CMonster管理所有的怪物
，但是其它类中并不会对具体的某只怪物做出引用。）
    而且观察每个单件类中对其它类的引用，也是引用其确定的单件函数。那么，整个
项目中OO（面向对象）所表现的地方，就只有那几个类的继承：
        CCreature
        CItem
        CSpirit
    等等。
    
    然而，作为只在“管理者”类中存在的“被管理者”来说，这些元素就算被抽象成结
构（struct）而非类（class），从实质上来说，并没有增加多少管理的逻辑复杂度，只是
把一些函数的所属者由“被管理者”移到了“管理者”身上。
    所以，为了减少一些开销（像this指针，像虚函数表查询等等），很多游戏在设计上
实际上用的是C而不是C++。


























