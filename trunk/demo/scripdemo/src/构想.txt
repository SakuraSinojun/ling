





						DLL型透明化脚本构想




	游戏制作好后，假定某个模组制作者制作了一个新的剧情（或者甚至就是制作
	游戏原本的剧情的时候），他对以下几个事件做出了处理：
		
		角色进入深色草地的时候，
		碰到怪物的时候，
		走到地图边缘的时候，
		
		对于各个事件，处理方案分别被写到了下面几个函数中。
		EnterDeepGrassArea()
		TouchMonster()
		SwitchMap()
	
	因为游戏主体已经完成，详细的流程处理已经与游戏的那个exe无关了，所以
	这三个函数应该是存在于脚本中。

	然而这三个函数的调用者应该是游戏exe本身，，就是说，，当角色进入深色草
	地的时候，，游戏exe知道到脚本里来执行EnterDeepGrassArea()函数，当角色
	碰到怪物的时候，游戏exe知道需要调用TouchMonster()函数。
	
	那么现在得到问题一：
		游戏exe是二进制码，脚本是源码形式存在的。作为游戏主体的二进制码应
	该如何使用一段脚本？

	假如脚本作者想控制游戏的流程。比如当角色进入深色草地后，原本平静的草从
	中突然跳出一个怪物来。那么他可能想在在EnterDeepGrassArea()里这样写：
		MONSTER mon = CreateMonster();
	然后他决定这个怪物是个半兽人，他可能会需要写：
		SetRace(mon, HALF_ORC);
	设想一下这个半兽人，也许他应该有一把斧子？
		ITEM	axe = CreateItem(ITEM_AXE);
		GiveItem(mon, axe);
	这是个仇视人类的半兽人，但是对于其它种族没有任何敌意。所以它跳出来之后
	看了一下玩家：
		if( GetRace(hero) == HALF_ORC )
		{
			SetCamp(mon, CAMP_HOSTILE);
		}else{
			SetCamp(mon, CAMP_FRIENDLY);
		}
	看，一个半兽人完成了。
	那么，如果这个半兽人是敌对的，那么他应该怎样呢？于是作者为这个半兽人设
	定了AI：
		首先是当它看到敌人时,马上把拿上的斧子拿到手里：
		AI_ON_SPOT:
			EquipItem(mon, axe);
		
		轮到半兽人攻击的时候，他会做什么呢？
		AI_ON_ATTACK_TURN:
			if (rand() % 2 == 0)
			{
				creature_attack(mon, hero);
			}else{
				creature_cast_spell(SPELL_TIMESTOP);
			}
		看，这是个会法术的半兽人，它有一半的概率会直接攻击玩家，或者施放了
		一个法术~


	以上设想中的脚本，除了逻辑控制外，还有下面几个函数所对应的功能：
		CreateMonster、SetRace、CreateItem、GiveItem、SetCamp、EquipItem、
		creature_attack、creature_cast_spell
		...
	然而这几个函数所修改的内容，都是exe在运行期在内存中的实例。
	那么就得到问题二：
		脚本中如何调用游戏中已经实现了的函数？


	这样得到了脚本设计的时候的两个问题：
		游戏exe是二进制码，脚本是源码形式存在的。作为游戏主体的二进制码应
	该如何使用一段脚本？
		脚本中如何调用游戏中已经实现了的函数？

	综合起来看呢？可以简单的一句话来描述：
		游戏exe与脚本中的代码，如何相互调用相互作用？


	仔细考虑这个问题，跟windows中的exe与dll之间的调用是何其相象吖~
	那么，游戏主体作为exe，脚本作为dll的话，应该在其中做一些工作实现一个脚
	本中对于exe中函数的透明的调用。就是说，最后的结果应该是给模组设计者这样
	的感觉：这只是一种跟C语言非常相似的脚本语言而已，而且我在做的是游戏模组，
	从我的东西开始，无论如何联想不到最终的DLL。



	可以用个简单的例子来说明这一点：
	模组制作者在toolset的地图工具中用鼠标拉方框的方式（就像MFC的对话框添加控件
	那样），设定了一个进入后触发某个事件的区域。作者为进入和离开这个区域设定的
	脚本名字（或者甚至是脚本文件）是a1_enter.tss和a1_leave.tss，（如果是文件的
	话，这就是两个.tss类型的文件。）。然后制作者在toolset工具集提供的脚本工具
	（刚才用的是地图工具）中修改这两个脚本文件的内容。它们的内容可能是：
	a1_enter.tss:
		
		void main()
		{
			这里写进入区域的事件。
		}
	a2_leave.tss:
		void foo()
		{
			某个需要的函数
		}
		void main()
		{
			foo();
			这里写离开区域的事件。
		}

	不论怎么设定，从模组制作者的角度来看，toolset最终对于某个触发事件的处理入口
	是各个main()函数。这样，对于模组作者而言，所编写的其实只是相应事件的游戏处理
	脚本，而不是最终DLL的一部分。


	在模组最终完成后，toolset需要把各个部分（地图啦，物品啦，NPC啦，脚本啦）打包
	到一起生成一个完整的模组。打包这个模组的时候，就可以把其中的脚本部分（比如上
	文件的a1_enter.tss和a2_leave.tss整理到一个完整的DLL中。
	因为每个脚本都是用main()来作为入口，所以简单地对main函数重命名就可以对其加以
	区别。比如，最终生成的DLL中，在玩家角色进入a1区域时，所调用的函数名可以是：
		trg_a1_enter_main
	如果exe中的函数被透明化处理过，那么除了函数名之外，这里就不需要再对作者的代码
	作任何更改了。

	到这里，最终的DLL中已经有了一个名字叫作trg_a1_enter_main的函数了，它的作用是
	对“玩家进a1区域”这一事件做出响应。
	然后，DLL在初始化的时候，把这个函数的入口地址，或者叫作指向这个函数的指针，连
	接到游戏主体中对于各种触发事件的处理过程中，或者游戏中处理各触发事件的是个类？
	CTrigger
	{
		void AddEnterAreaTrigger();		// 进入区域
		void AddLeaveAreaTrigger();		// 离开区域
		void AddUseItemTrigger();		// 使用物品（比如：喝了个血瓶。。）
		void AddTimerTrigger();			// 定时
		void AddTalk2NPCTrigger();		// 跟NPC对话
		void AddKillMonsterTrigger();	// 杀死怪物。比如杀掉某个怪物后更新任务日志
		void AddGetItemTrigger();		// 得到某件物品后触发（像暗黑第三幕里的黄金鸟任务）
		...
	};

	
	
	到此，游戏脚本的基本功能已经完整了。然后需要对其做透明化处理。
	
	exe编译完成后是一成不变的，变化的只是脚本这个DLL。所以，对于DLL中使用的exe中的函
	数，应该是exe在加载这个DLL后主动传递过去的。作为脚本的DLL，只需要把这些地址保存
	好，在需要的时候直接call过去就可以。

	对于DLL中的各种各样的触发脚本，应该是一个把函数地址“注册”给exe的过程。就是说，
	这些函数不需要把名字写到导出表中，而只是在DLL加载初始化的时候，把针对所有事件的
	响应函数的地址全部提交给相应的处理方法。就是说，上面的CTrigger类的各成员函数，共
	同需要的是DLL中函数的地址。

	双向注册完毕后，exe中保存的应该是DLL中各触发函数的地址，DLL中保存的应该是exe中
	给出的操作游戏流程的接口。


	script_demo.c中前半部分就是这种思路下exe函数对于DLL的透明化的实现。exe给了三个
	函数：
		map_create, 
		map_set_background, 
		map_add_trigger
	script_demo.c中重新写了这三个函数，具体的实现只是判断函数指针然后跳转到指针指向
	的地址。
	exe通过调用script_set_func()函数来注册不同的函数的地址，注册完成后调用script_check
	来确定DLL中所有函数指针是否都得到了初始化。














