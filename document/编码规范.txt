



    请确保每段代码完全遵守C或C++规范，确保每段代码编译时不要有任何的错误与警告
（error和warning）。
    请不要使用与编译器相关的元素。比如：
        #pragma comment(lib, "...")
    请为你的库做一个整体的.h文件，如果你的库是由很多.c .cpp .h文件组成的，请确保
包含一个特定的.h文件就可以正常地使用你的库中的所有函数。
    请尽量减少你的代码与其它部分的耦合性，尤其是还在设计中并没有成品的部分。如果
一定要使用还没开始编码的部分，请在文档中详细描述你所需求的接口规则，比如需求哪些
成员，所用函数的返回类型、函数调用规则（__stdcall, __cdecl之类）、参数列表、参数
类型等成分，并准确阐述各成分不同的值表示什么意义。
    cpp或c文件中不必写详细注释。如果一个函数或模块或类，成分或用法比较复杂，请在
单独的文档中详细描述其功能、原理等必要成分。
    请在你所写的.cpp或.c或.h文件开始处以显明注释的形式标名这个文件的作者。如果一
个文件的作者不是你，请不要直接修改其内容。如果确实需要调整，请将你的要求以及原因
准确详细地提供给文件原作者。
    除源码以及库外，svn服务器上不存放任何其它类型的文件（比如VC6的项目空间.dsw或
者项目.dsp文件），一般来说，大多数代码应该可以在VC6中新建win32 console空项目后，
将所有源码文件添加后就可以顺利编译。如果你的代码不能满足这个规则（比如用了第三方
库，需要在项目设置中添加附加库之类的情况），请在文档中详细地说明应该怎样设置开发
环境。如果使用了第三方库，请使用相对路径来对其进行引用。（即：在VC6中的表现为：
只设置项目属性即可顺利编译，而不需设置整个开发环境的路径。）





编码规范：

    如果你所做的是CPP部分，请尽量使用匈牙利命名法（百度）。
    如果你所做的是C部分，请尽量使用C风格命名。
    C风格补充：你的函数名必须全部使用小写字母，用下划线区分函数名中不同的单词。
如果一个函数只在你的模块中被引用，函数名请用单下划线开头。
    
    文件中使用的宏应该全部大写，常数应该全部大写。
    
    如果你的代码中存在与CPU位数相关的部分（32位CPU或64位CPU），请确保你所使用的
变量的长度在所有平台上能够通用。
    变量长度有个简单的例子。比如有以下这个结构：
    
        typedef struct DEMO
        {
            int x;
            int y;
            int z;
        }DEMO;
        
    这个结构的长度（sizeof(DEMO)）在32位平台上是12字节，而在64位的平台上是24字
节。所以如果使用这个结构来读取其它人在不同平台上生成的文件，会明显出现数据错误。
    一般来说，可以用如下方案来解决：
        typedef long			G_INT;
        typedef long			G_LONG;
        typedef char			G_CHAR;
        ......
    如果可能的话，游戏通用模块（common部分）中应该提供对这些数据类型的定义，请随
时关注common的更新，并在需要明确确定长度的时候尽量使用这样的一些通用定义。

    如果你设计了一个文件格式的话，请明确地提供一对函数（读与写）。
    
    请尽全力关注内存泄漏问题。一般来说，不要提供一个需要调用者释放空间的函数。如
果的确要返回一段堆内的空间（new到或malloc()到的），请提供相应的释放空间的函数，
并撰写完整的内存使用文档。

    
    --------如果你的代码需要给别人参考，请注意以下规范：--------

    请用Tab进行缩进，而不是使用空格。一般编译器的tab默认宽度应该是4或8。请不要使
于低于4宽度的代码缩进量。并且，请在文件的一开始标名你所使用的tab的宽度。
    
    请尽量保持代码的每一行只进行一次操作，尽量不要使用学院派风格。比如：
        
        b = ++a * array[i++];
        请写成
        a ++;
        b = a * array[i];
        i ++;
    
    if、while、do的条件分支内，即使只有一条语句，也请使用大括号将其包含在内，如：
        
        if(p == NULL)
        {
            return;
        }

    if的条件判断，请尽量保证能明确地表示变量的类型。比如p是一个指针，应该这样写：
        if(p != NULL)
    而不应该写成
        if(!p)
        
    相应的，如果flag是一个bool甚至BOOL型，应该这样写：
        if(flag)
    而不应该写成
        if(flag == TRUE)

    大括号的规则，请尽量使用C/C++风格的大括号，而不是java风格的：
        
        C/C++风格：
            void foo()
            {
                for(;;)
                {
                }
            }
        Java风格（请不要使用这种风格）：
            void foo(){
                for(;;){
                }
            }
    






















